import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { endpoints } from '../../app/apis';

export interface UserState {
	name: string | null;
	username: string | null;
	token?: string | null;
	//status: 'idle' | 'loading' | 'failed';
}

const initialState: UserState = {
	name: null,
	username: null,
	//status: 'idle',
};
export const userSlice = createSlice({
	name: 'user',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		logout: (state) => {
			console.log('logout');

			state.name = '';
			state.username = '';
			state.token = undefined;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder.addMatcher(endpoints.login.matchFulfilled, (state, action) => {
			console.log(action.payload);
			state.name = action.payload.name;
			state.username = action.payload.username;
			state.token = action.payload.token;
		});
	},
});

export const { logout } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user.username;
export const selectUserToken = (state: RootState) => state.user.token;
export default userSlice.reducer;
